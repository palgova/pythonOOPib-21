from abc import ABC, abstractmethod

# Abstract Factory
class CarFactory(ABC):
    @abstractmethod
    def create_car(self):
        pass

# Concrete Factories
class ElectricCarFactory(CarFactory):
    def create_car(self):
        return ElectricCar()

class PetrolCarFactory(CarFactory):
    def create_car(self):
        return PetrolCar()

class HybridCarFactory(CarFactory):
    def create_car(self):
        return HybridCar()

# Abstract Product
class Car(ABC):
    @abstractmethod
    def drive(self):
        pass

# Concrete Products
class ElectricCar(Car):
    def drive(self):
        print("Driving an electric car")

class PetrolCar(Car):
    def drive(self):
        print("Driving a petrol car")

class HybridCar(Car):
    def drive(self):
        print("Driving a hybrid car")

# Client code
def create_car(factory):
    car = factory.create_car()
    car.drive()

# Using the factories to create different types of cars
electric_factory = ElectricCarFactory()
petrol_factory = PetrolCarFactory()
hybrid_factory = HybridCarFactory()

create_car(electric_factory)  # Output: Driving an electric car
create_car(petrol_factory)    # Output: Driving a petrol car
create_car(hybrid_factory)    # Output: Driving a hybrid car
